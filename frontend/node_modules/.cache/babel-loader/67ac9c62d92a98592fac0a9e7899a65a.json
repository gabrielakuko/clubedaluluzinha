{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielantonio/Documents/www/luluzinha/frontend/src/Componentes/Slide/Slide.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Flickity from 'flickity';\nimport 'flickity/dist/flickity.min.css';\nexport default class Slider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      flickityReady: false\n    };\n    this.refreshFlickity = this.refreshFlickity.bind(this);\n  }\n\n  componentDidMount() {\n    this.flickity = new Flickity(this.flickityNode, this.props.options || {});\n    this.setState({\n      flickityReady: true\n    });\n  }\n\n  refreshFlickity() {\n    this.flickity.reloadCells();\n    this.flickity.resize();\n    this.flickity.updateDraggable();\n  }\n\n  componentWillUnmount() {\n    this.flickity.destroy();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const flickityDidBecomeActive = !prevState.flickityReady && this.state.flickityReady;\n    const childrenDidChange = prevProps.children.length !== this.props.children.length;\n\n    if (flickityDidBecomeActive || childrenDidChange) {\n      this.refreshFlickity();\n    }\n  }\n\n  renderPortal() {\n    if (!this.flickityNode) {\n      return null;\n    }\n\n    const mountNode = this.flickityNode.querySelector('.flickity-slider');\n\n    if (mountNode) {\n      return ReactDOM.createPortal(this.props.children, mountNode);\n    }\n  }\n\n  render() {\n    return [React.createElement(\"div\", {\n      className: 'test',\n      key: \"flickityBase\",\n      ref: node => this.flickityNode = node,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), this.renderPortal()].filter(Boolean);\n  }\n\n}","map":{"version":3,"sources":["/Users/gabrielantonio/Documents/www/luluzinha/frontend/src/Componentes/Slide/Slide.js"],"names":["React","ReactDOM","Flickity","Slider","Component","constructor","props","state","flickityReady","refreshFlickity","bind","componentDidMount","flickity","flickityNode","options","setState","reloadCells","resize","updateDraggable","componentWillUnmount","destroy","componentDidUpdate","prevProps","prevState","flickityDidBecomeActive","childrenDidChange","children","length","renderPortal","mountNode","querySelector","createPortal","render","node","filter","Boolean"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAO,gCAAP;AAEA,eAAe,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AACpDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACnB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACbC,MAAAA,aAAa,EAAE;AADF,KAAb;AAIA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACC;;AAEDC,EAAAA,iBAAiB,GAAG;AACpB,SAAKC,QAAL,GAAgB,IAAIV,QAAJ,CAAa,KAAKW,YAAlB,EAAgC,KAAKP,KAAL,CAAWQ,OAAX,IAAsB,EAAtD,CAAhB;AAEA,SAAKC,QAAL,CAAc;AACdP,MAAAA,aAAa,EAAE;AADD,KAAd;AAGC;;AAEDC,EAAAA,eAAe,GAAG;AAClB,SAAKG,QAAL,CAAcI,WAAd;AACA,SAAKJ,QAAL,CAAcK,MAAd;AACA,SAAKL,QAAL,CAAcM,eAAd;AACC;;AAEDC,EAAAA,oBAAoB,GAAG;AACvB,SAAKP,QAAL,CAAcQ,OAAd;AACC;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACzC,UAAMC,uBAAuB,GAAG,CAACD,SAAS,CAACf,aAAX,IAA4B,KAAKD,KAAL,CAAWC,aAAvE;AACA,UAAMiB,iBAAiB,GAAGH,SAAS,CAACI,QAAV,CAAmBC,MAAnB,KAA8B,KAAKrB,KAAL,CAAWoB,QAAX,CAAoBC,MAA5E;;AAEA,QAAIH,uBAAuB,IAAIC,iBAA/B,EAAkD;AAClD,WAAKhB,eAAL;AACC;AACA;;AAEDmB,EAAAA,YAAY,GAAG;AACf,QAAI,CAAC,KAAKf,YAAV,EAAwB;AACxB,aAAO,IAAP;AACC;;AAED,UAAMgB,SAAS,GAAG,KAAKhB,YAAL,CAAkBiB,aAAlB,CAAgC,kBAAhC,CAAlB;;AAEA,QAAID,SAAJ,EAAe;AACf,aAAO5B,QAAQ,CAAC8B,YAAT,CAAsB,KAAKzB,KAAL,CAAWoB,QAAjC,EAA2CG,SAA3C,CAAP;AACC;AACA;;AAEDG,EAAAA,MAAM,GAAG;AACT,WAAO,CACP;AAAK,MAAA,SAAS,EAAE,MAAhB;AAAwB,MAAA,GAAG,EAAC,cAA5B;AAA2C,MAAA,GAAG,EAAEC,IAAI,IAAK,KAAKpB,YAAL,GAAoBoB,IAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO,EAEP,KAAKL,YAAL,EAFO,EAGLM,MAHK,CAGEC,OAHF,CAAP;AAIC;;AAvDmD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Flickity from 'flickity';\nimport 'flickity/dist/flickity.min.css';\n\nexport default class Slider extends React.Component {\nconstructor(props) {\nsuper(props);\n\nthis.state = {\nflickityReady: false,\n};\n\nthis.refreshFlickity = this.refreshFlickity.bind(this);\n}\n\ncomponentDidMount() {\nthis.flickity = new Flickity(this.flickityNode, this.props.options || {});\n\nthis.setState({\nflickityReady: true,\n});\n}\n\nrefreshFlickity() {\nthis.flickity.reloadCells();\nthis.flickity.resize();\nthis.flickity.updateDraggable();\n}\n\ncomponentWillUnmount() {\nthis.flickity.destroy();\n}\n\ncomponentDidUpdate(prevProps, prevState) {\nconst flickityDidBecomeActive = !prevState.flickityReady && this.state.flickityReady;\nconst childrenDidChange = prevProps.children.length !== this.props.children.length;\n\nif (flickityDidBecomeActive || childrenDidChange) {\nthis.refreshFlickity();\n}\n}\n\nrenderPortal() {\nif (!this.flickityNode) {\nreturn null;\n}\n\nconst mountNode = this.flickityNode.querySelector('.flickity-slider');\n\nif (mountNode) {\nreturn ReactDOM.createPortal(this.props.children, mountNode);\n}\n}\n\nrender() {\nreturn [\n<div className={'test'} key=\"flickityBase\" ref={node => (this.flickityNode = node)} />,\nthis.renderPortal(),\n].filter(Boolean);\n}\n}"]},"metadata":{},"sourceType":"module"}